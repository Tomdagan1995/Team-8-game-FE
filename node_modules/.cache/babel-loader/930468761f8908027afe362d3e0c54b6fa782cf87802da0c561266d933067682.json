{"ast":null,"code":"import { Action } from \"./Input\";\nimport { rotate } from \"./Tetrominoes\";\nimport { hasCollision, isWithinBoard } from \"./Board\";\nconst attemptRotation = _ref => {\n  let {\n    board,\n    player,\n    setPlayer\n  } = _ref;\n  const shape = rotate({\n    piece: player.tetromino.shape,\n    direction: 1\n  });\n  const position = player.position;\n  const isValidRotation = isWithinBoard({\n    board,\n    position,\n    shape\n  }) && !hasCollision({\n    board,\n    position,\n    shape\n  });\n  if (isValidRotation) {\n    setPlayer({\n      ...player,\n      tetromino: {\n        ...player.tetromino,\n        shape\n      }\n    });\n  } else {\n    return false;\n  }\n};\nexport const movePlayer = _ref2 => {\n  let {\n    delta,\n    position,\n    shape,\n    board\n  } = _ref2;\n  const desiredNextPosition = {};\n};\nconst attemptMovement = _ref3 => {\n  let {\n    board,\n    player,\n    setPlayer,\n    action,\n    setGameOver\n  } = _ref3;\n  const delta = {\n    row: 0,\n    column: 0\n  };\n  let isFastDropping = false;\n  if (action === Action.FastDrop) {\n    isFastDropping = true;\n  } else if (action === Action.SlowDrop) {\n    delta.row += 1;\n  } else if (action === Action.Left) {\n    delta.column -= 1;\n  } else if (action === Action.Right) {\n    delta.column += 1;\n  }\n  const {\n    collided,\n    nextPosition\n  } = movePlayer({\n    delta,\n    position: player.position,\n    shape: player.tetromino.shape,\n    board\n  });\n  const isGameOver = collided && player.position.row === 0;\n  if (isGameOver) {\n    setGameOver(isGameOver);\n  }\n  setPlayer({\n    ...player,\n    collided,\n    isFastDropping,\n    position: nextPosition\n  });\n};\nexport const playerController = _ref4 => {\n  let {\n    action,\n    board,\n    player,\n    setPlayer,\n    setGameOver\n  } = _ref4;\n  if (!action) return;\n  if (action === Action.Rotate) {\n    attemptRotation({\n      board,\n      player,\n      setPlayer\n    });\n  } else {\n    attemptMovement({\n      board,\n      player,\n      setPlayer,\n      action,\n      setGameOver\n    });\n  }\n};","map":{"version":3,"names":["Action","rotate","hasCollision","isWithinBoard","attemptRotation","board","player","setPlayer","shape","piece","tetromino","direction","position","isValidRotation","movePlayer","delta","desiredNextPosition","attemptMovement","action","setGameOver","row","column","isFastDropping","FastDrop","SlowDrop","Left","Right","collided","nextPosition","isGameOver","playerController","Rotate"],"sources":["/Users/bignovik/Desktop/ITC Assignments/Team-8-game-FE/src/business/PlayerController.js"],"sourcesContent":["import { Action } from \"./Input\";\nimport { rotate } from \"./Tetrominoes\";\nimport { hasCollision, isWithinBoard } from \"./Board\";\n\nconst attemptRotation = ({ board, player, setPlayer }) => {\n  const shape = rotate({\n    piece: player.tetromino.shape,\n    direction: 1,\n  });\n\n  const position = player.position;\n  const isValidRotation =\n    isWithinBoard({ board, position, shape }) &&\n    !hasCollision({ board, position, shape });\n\n  if (isValidRotation) {\n    setPlayer({\n      ...player,\n      tetromino: {\n        ...player.tetromino,\n        shape,\n      },\n    });\n  } else {\n    return false;\n  }\n};\n\nexport const movePlayer = ({ delta, position, shape, board }) => {\n    const desiredNextPosition = {\n        \n    }\n}\n\nconst attemptMovement = ({ board, player, setPlayer, action, setGameOver }) => {\n  const delta = { row: 0, column: 0 };\n  let isFastDropping = false;\n\n  if (action === Action.FastDrop) {\n    isFastDropping = true;\n  } else if (action === Action.SlowDrop) {\n    delta.row += 1;\n  } else if (action === Action.Left) {\n    delta.column -= 1;\n  } else if (action === Action.Right) {\n    delta.column += 1;\n  }\n\n  const { collided, nextPosition } = movePlayer({\n    delta,\n    position: player.position,\n    shape: player.tetromino.shape,\n    board,\n  });\n\n  const isGameOver = collided && player.position.row === 0;\n  if (isGameOver) {\n    setGameOver(isGameOver);\n  }\n\n  setPlayer({\n    ...player,\n    collided,\n    isFastDropping,\n    position: nextPosition,\n  });\n};\n\nexport const playerController = ({\n  action,\n  board,\n  player,\n  setPlayer,\n  setGameOver,\n}) => {\n  if (!action) return;\n\n  if (action === Action.Rotate) {\n    attemptRotation({ board, player, setPlayer });\n  } else {\n    attemptMovement({ board, player, setPlayer, action, setGameOver });\n  }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}