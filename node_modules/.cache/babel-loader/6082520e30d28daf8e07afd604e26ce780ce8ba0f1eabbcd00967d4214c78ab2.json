{"ast":null,"code":"import { Action } from \"./Input\";\nimport { rotate } from \"./Tetrominoes\";\nimport { hasCollision, isWithinBoard } from \"./B\";\nconst attemptRotation = _ref => {\n  let {\n    board,\n    player,\n    setPlayer\n  } = _ref;\n  const shape = rotate({\n    pierce: player.tetromino.shape,\n    direction: 1\n  });\n  const position = player.position;\n  const isValidRotation = isWithinBoard({\n    board,\n    position,\n    shape\n  }) && !hasCollision({\n    board,\n    position,\n    shape\n  });\n  if (isValidRotation) {\n    setPlayer({\n      ...player,\n      tetromino: {\n        ...player.tetromino,\n        shape\n      }\n    });\n  } else {\n    return false;\n  }\n};\nexport const playerController = _ref2 => {\n  let {\n    action,\n    board,\n    player,\n    setPlayer,\n    setGameOver\n  } = _ref2;\n  if (!action) return;\n  if (action === Action.Rotate) {\n    attemptRotation({\n      board,\n      player,\n      setPlayer\n    });\n  }\n};","map":{"version":3,"names":["Action","rotate","hasCollision","isWithinBoard","attemptRotation","board","player","setPlayer","shape","pierce","tetromino","direction","position","isValidRotation","playerController","action","setGameOver","Rotate"],"sources":["/Users/bignovik/Desktop/ITC Assignments/Team-8-game-FE/src/business/PlayerController.js"],"sourcesContent":["import { Action } from \"./Input\";\nimport { rotate } from \"./Tetrominoes\";\nimport { hasCollision, isWithinBoard } from \"./B\"\n\nconst attemptRotation = ({ board, player, setPlayer }) => {\n  const shape = rotate({\n    pierce: player.tetromino.shape,\n    direction: 1,\n  });\n\n  const position = player.position;\n  const isValidRotation =\n    isWithinBoard({ board, position, shape }) &&\n    !hasCollision({ board, position, shape });\n\n    if (isValidRotation) {\n        setPlayer({\n            ...player,\n            tetromino: {\n                ...player.tetromino,\n                shape\n            }\n        })\n    } else {\n        return false;\n    }\n};\n\nexport const playerController = ({\n  action,\n  board,\n  player,\n  setPlayer,\n  setGameOver,\n}) => {\n  if (!action) return;\n\n  if (action === Action.Rotate) {\n    attemptRotation({ board, player, setPlayer });\n  }\n};\n"],"mappings":"AAAA,SAASA,MAAM,QAAQ,SAAS;AAChC,SAASC,MAAM,QAAQ,eAAe;AACtC,SAASC,YAAY,EAAEC,aAAa,QAAQ,KAAK;AAEjD,MAAMC,eAAe,GAAG,QAAkC;EAAA,IAAjC;IAAEC,KAAK;IAAEC,MAAM;IAAEC;EAAU,CAAC;EACnD,MAAMC,KAAK,GAAGP,MAAM,CAAC;IACnBQ,MAAM,EAAEH,MAAM,CAACI,SAAS,CAACF,KAAK;IAC9BG,SAAS,EAAE;EACb,CAAC,CAAC;EAEF,MAAMC,QAAQ,GAAGN,MAAM,CAACM,QAAQ;EAChC,MAAMC,eAAe,GACnBV,aAAa,CAAC;IAAEE,KAAK;IAAEO,QAAQ;IAAEJ;EAAM,CAAC,CAAC,IACzC,CAACN,YAAY,CAAC;IAAEG,KAAK;IAAEO,QAAQ;IAAEJ;EAAM,CAAC,CAAC;EAEzC,IAAIK,eAAe,EAAE;IACjBN,SAAS,CAAC;MACN,GAAGD,MAAM;MACTI,SAAS,EAAE;QACP,GAAGJ,MAAM,CAACI,SAAS;QACnBF;MACJ;IACJ,CAAC,CAAC;EACN,CAAC,MAAM;IACH,OAAO,KAAK;EAChB;AACJ,CAAC;AAED,OAAO,MAAMM,gBAAgB,GAAG,SAM1B;EAAA,IAN2B;IAC/BC,MAAM;IACNV,KAAK;IACLC,MAAM;IACNC,SAAS;IACTS;EACF,CAAC;EACC,IAAI,CAACD,MAAM,EAAE;EAEb,IAAIA,MAAM,KAAKf,MAAM,CAACiB,MAAM,EAAE;IAC5Bb,eAAe,CAAC;MAAEC,KAAK;MAAEC,MAAM;MAAEC;IAAU,CAAC,CAAC;EAC/C;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}