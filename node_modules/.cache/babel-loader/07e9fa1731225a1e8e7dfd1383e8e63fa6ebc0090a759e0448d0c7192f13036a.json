{"ast":null,"code":"import { defaultCell } from \"./Cell\";\nimport { transferToBoard } from \"./Tetrominoes\";\nexport const buildBoard = _ref => {\n  let {\n    rows,\n    columns\n  } = _ref;\n  const builtRows = Array.from({\n    length: rows\n  }, () => Array.from({\n    length: columns\n  }, () => ({\n    ...defaultCell\n  })));\n  return {\n    rows: builtRows,\n    size: {\n      rows,\n      columns\n    }\n  };\n};\nexport const nextBoard = _ref2 => {\n  let {\n    board,\n    player,\n    resetPleyer,\n    addLinesCleared\n  } = _ref2;\n  const {\n    tetromino,\n    position\n  } = player;\n  let rows = board.rows.map(row => row.map(cell => cell.occupied ? cell : {\n    ...defaultCell\n  }));\n  rows = transferToBoard({\n    className: tetromino.className,\n    isOccupied: player.collided,\n    position,\n    rows,\n    shape: tetromino.shape\n  });\n  return {\n    rows,\n    size: {\n      ...board.size\n    }\n  };\n};\nexport const hasCollision = _ref3 => {\n  let {\n    board,\n    position,\n    shape\n  } = _ref3;\n  for (let y = 0; y < shape.length; y++) {\n    const row = y + position.row;\n    for (let x = 0; x < shape[y].length; x++) {\n      if (shape[y][x]) {\n        const column = x + position.column;\n        if (board.rows[row] && board.rows[row]) return false;\n      }\n    }\n  }\n  return true;\n};\nexport const isWithinBoard = _ref4 => {\n  let {\n    board,\n    position,\n    shape\n  } = _ref4;\n  for (let y = 0; y < shape.length; y++) {\n    const row = y + position.row;\n    for (let x = 0; x < shape[y].length; x++) {\n      if (shape[y][x]) {\n        const column = x + position.column;\n        const isValidPosition = board.rows[row] && board.rows[row][column];\n        if (!isValidPosition) return false;\n      }\n    }\n  }\n  return true;\n};","map":{"version":3,"names":["defaultCell","transferToBoard","buildBoard","rows","columns","builtRows","Array","from","length","size","nextBoard","board","player","resetPleyer","addLinesCleared","tetromino","position","map","row","cell","occupied","className","isOccupied","collided","shape","hasCollision","y","x","column","isWithinBoard","isValidPosition"],"sources":["/Users/bignovik/Desktop/ITC Assignments/Team-8-game-FE/src/business/Board.js"],"sourcesContent":["import { defaultCell } from \"./Cell\";\nimport { transferToBoard } from \"./Tetrominoes\";\n\nexport const buildBoard = ({ rows, columns }) => {\n  const builtRows = Array.from({ length: rows }, () =>\n    Array.from({ length: columns }, () => ({ ...defaultCell }))\n  );\n\n  return {\n    rows: builtRows,\n    size: { rows, columns },\n  };\n};\n\nexport const nextBoard = ({ board, player, resetPleyer, addLinesCleared }) => {\n  const { tetromino, position } = player;\n\n  let rows = board.rows.map((row) =>\n    row.map((cell) => (cell.occupied ? cell : { ...defaultCell }))\n  );\n\n  rows = transferToBoard({\n    className: tetromino.className,\n    isOccupied: player.collided,\n    position,\n    rows,\n    shape: tetromino.shape,\n  });\n\n  return {\n    rows,\n    size: { ...board.size },\n  };\n};\n\nexport const hasCollision = ({ board, position, shape }) => {\n    for (let y = 0; y < shape.length; y++) {\n      const row = y + position.row;\n      for (let x = 0; x < shape[y].length; x++) {\n        if (shape[y][x]) {\n          const column = x + position.column;\n          \n  \n          if (\n            board.rows[row] &&\n            board.rows[row]\n          ) return false;\n        }\n      }\n    }\n    return true;\n  };\n\nexport const isWithinBoard = ({ board, position, shape }) => {\n  for (let y = 0; y < shape.length; y++) {\n    const row = y + position.row;\n    for (let x = 0; x < shape[y].length; x++) {\n      if (shape[y][x]) {\n        const column = x + position.column;\n        const isValidPosition = board.rows[row] && board.rows[row][column];\n\n        if (!isValidPosition) return false;\n      }\n    }\n  }\n  return true;\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}