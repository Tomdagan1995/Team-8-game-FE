{"ast":null,"code":"import { defaultCell } from \"./Cell\";\nimport { transferToBoard } from \"./Tetrominoes\";\nexport const buildBoard = _ref => {\n  let {\n    rows,\n    columns\n  } = _ref;\n  const builtRows = Array.from({\n    length: rows\n  }, () => Array.from({\n    length: columns\n  }, () => ({\n    ...defaultCell\n  })));\n  return {\n    rows: builtRows,\n    size: {\n      rows,\n      columns\n    }\n  };\n};\nconst findDropPosition = _ref2 => {\n  let {\n    board,\n    position,\n    shape\n  } = _ref2;\n  let max = board.size.rows - po;\n};\nexport const nextBoard = _ref3 => {\n  let {\n    board,\n    player,\n    resetPlayer,\n    addLinesCleared\n  } = _ref3;\n  const {\n    tetromino,\n    position\n  } = player;\n  let rows = board.rows.map(row => row.map(cell => cell.occupied ? cell : {\n    ...defaultCell\n  }));\n  const dropPosition = findDropPosition({\n    board,\n    position,\n    shape: tetromino.shape\n  });\n  rows = transferToBoard({\n    className: tetromino.className,\n    isOccupied: player.collided,\n    position,\n    rows,\n    shape: tetromino.shape\n  });\n  if (player.collided || player.isFastDropping) {\n    resetPlayer();\n  }\n  return {\n    rows,\n    size: {\n      ...board.size\n    }\n  };\n};\nexport const hasCollision = _ref4 => {\n  let {\n    board,\n    position,\n    shape\n  } = _ref4;\n  for (let y = 0; y < shape.length; y++) {\n    const row = y + position.row;\n    for (let x = 0; x < shape[y].length; x++) {\n      if (shape[y][x]) {\n        const column = x + position.column;\n        if (board.rows[row] && board.rows[row][column] && board.rows[row][column].occupied) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n};\nexport const isWithinBoard = _ref5 => {\n  let {\n    board,\n    position,\n    shape\n  } = _ref5;\n  for (let y = 0; y < shape.length; y++) {\n    const row = y + position.row;\n    for (let x = 0; x < shape[y].length; x++) {\n      if (shape[y][x]) {\n        const column = x + position.column;\n        const isValidPosition = board.rows[row] && board.rows[row][column];\n        if (!isValidPosition) return false;\n      }\n    }\n  }\n  return true;\n};","map":{"version":3,"names":["defaultCell","transferToBoard","buildBoard","rows","columns","builtRows","Array","from","length","size","findDropPosition","board","position","shape","max","po","nextBoard","player","resetPlayer","addLinesCleared","tetromino","map","row","cell","occupied","dropPosition","className","isOccupied","collided","isFastDropping","hasCollision","y","x","column","isWithinBoard","isValidPosition"],"sources":["/Users/bignovik/Desktop/ITC Assignments/Team-8-game-FE/src/business/Board.js"],"sourcesContent":["import { defaultCell } from \"./Cell\";\nimport { transferToBoard } from \"./Tetrominoes\";\n\nexport const buildBoard = ({ rows, columns }) => {\n  const builtRows = Array.from({ length: rows }, () =>\n    Array.from({ length: columns }, () => ({ ...defaultCell }))\n  );\n\n  return {\n    rows: builtRows,\n    size: { rows, columns },\n  };\n};\n\nconst findDropPosition = ({ board, position, shape }) => {\n    let max = board.size.rows - po\n}\n\nexport const nextBoard = ({ board, player, resetPlayer, addLinesCleared }) => {\n  const { tetromino, position } = player;\n\n  let rows = board.rows.map((row) =>\n    row.map((cell) => (cell.occupied ? cell : { ...defaultCell }))\n  );\n\n  const dropPosition = findDropPosition({\n    board,\n    position,\n    shape: tetromino.shape,\n  });\n\n  rows = transferToBoard({\n    className: tetromino.className,\n    isOccupied: player.collided,\n    position,\n    rows,\n    shape: tetromino.shape,\n  });\n\n  if (player.collided || player.isFastDropping) {\n    resetPlayer();\n  }\n\n  return {\n    rows,\n    size: { ...board.size },\n  };\n};\n\nexport const hasCollision = ({ board, position, shape }) => {\n  for (let y = 0; y < shape.length; y++) {\n    const row = y + position.row;\n    for (let x = 0; x < shape[y].length; x++) {\n      if (shape[y][x]) {\n        const column = x + position.column;\n\n        if (\n          board.rows[row] &&\n          board.rows[row][column] &&\n          board.rows[row][column].occupied\n        ) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n};\n\nexport const isWithinBoard = ({ board, position, shape }) => {\n  for (let y = 0; y < shape.length; y++) {\n    const row = y + position.row;\n    for (let x = 0; x < shape[y].length; x++) {\n      if (shape[y][x]) {\n        const column = x + position.column;\n        const isValidPosition = board.rows[row] && board.rows[row][column];\n\n        if (!isValidPosition) return false;\n      }\n    }\n  }\n  return true;\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}