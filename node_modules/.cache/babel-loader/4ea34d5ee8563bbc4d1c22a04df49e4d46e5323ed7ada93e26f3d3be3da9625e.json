{"ast":null,"code":"import { defaultCell } from \"./Cell\";\nimport { movePlayer } from \"./PlayerController\";\nimport { transferToBoard } from \"./Tetrominoes\";\nexport const buildBoard = _ref => {\n  let {\n    rows,\n    columns\n  } = _ref;\n  const builtRows = Array.from({\n    length: rows\n  }, () => Array.from({\n    length: columns\n  }, () => ({\n    ...defaultCell\n  })));\n  return {\n    rows: builtRows,\n    size: {\n      rows,\n      columns\n    }\n  };\n};\nconst findDropPosition = _ref2 => {\n  let {\n    board,\n    position,\n    shape\n  } = _ref2;\n  let max = board.size.rows - position.row + 1;\n  let row = 0;\n  for (let i = 0; i < max; i++) {\n    const delta = {\n      row: i,\n      column: 0\n    };\n    const result = movePlayer({\n      delta,\n      position,\n      shape,\n      board\n    });\n    const {\n      collided\n    } = result;\n    if (collided) {\n      break;\n    }\n    row = position.row + i;\n  }\n  return {\n    ...position,\n    row\n  };\n};\nexport const nextBoard = _ref3 => {\n  let {\n    board,\n    player,\n    resetPlayer,\n    addLinesCleared\n  } = _ref3;\n  const {\n    tetromino,\n    position\n  } = player;\n  let rows = board.rows.map(row => row.map(cell => cell.occupied ? cell : {\n    ...defaultCell\n  }));\n  const dropPosition = findDropPosition({\n    board,\n    position,\n    shape: tetromino.shape\n  });\n  const className = `${tetromino.className} ${player.isFastDropping ? \"\" : \"ghost\"}`;\n  rows = transferToBoard({\n    className,\n    isOccupied: player.isFastDropping,\n    position: dropPosition,\n    rows,\n    shape: tetromino.shape\n  });\n  if (!player.isFastDropping) {\n    rows = transferToBoard({\n      className: tetromino.className,\n      isOccupied: player.collided,\n      position,\n      rows,\n      shape: tetromino.shape\n    });\n  }\n  const blankrow = rows[0].map(_ => ({\n    ...defaultCell\n  }));\n  let linesCleared;\n  if (player.collided || player.isFastDropping) {\n    resetPlayer();\n  }\n  return {\n    rows,\n    size: {\n      ...board.size\n    }\n  };\n};\nexport const hasCollision = _ref4 => {\n  let {\n    board,\n    position,\n    shape\n  } = _ref4;\n  for (let y = 0; y < shape.length; y++) {\n    const row = y + position.row;\n    for (let x = 0; x < shape[y].length; x++) {\n      if (shape[y][x]) {\n        const column = x + position.column;\n        if (board.rows[row] && board.rows[row][column] && board.rows[row][column].occupied) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n};\nexport const isWithinBoard = _ref5 => {\n  let {\n    board,\n    position,\n    shape\n  } = _ref5;\n  for (let y = 0; y < shape.length; y++) {\n    const row = y + position.row;\n    for (let x = 0; x < shape[y].length; x++) {\n      if (shape[y][x]) {\n        const column = x + position.column;\n        const isValidPosition = board.rows[row] && board.rows[row][column];\n        if (!isValidPosition) return false;\n      }\n    }\n  }\n  return true;\n};","map":{"version":3,"names":["defaultCell","movePlayer","transferToBoard","buildBoard","rows","columns","builtRows","Array","from","length","size","findDropPosition","board","position","shape","max","row","i","delta","column","result","collided","nextBoard","player","resetPlayer","addLinesCleared","tetromino","map","cell","occupied","dropPosition","className","isFastDropping","isOccupied","blankrow","_","linesCleared","hasCollision","y","x","isWithinBoard","isValidPosition"],"sources":["/Users/bignovik/Desktop/ITC Assignments/Team-8-game-FE/src/business/Board.js"],"sourcesContent":["import { defaultCell } from \"./Cell\";\nimport { movePlayer } from \"./PlayerController\";\nimport { transferToBoard } from \"./Tetrominoes\";\n\nexport const buildBoard = ({ rows, columns }) => {\n  const builtRows = Array.from({ length: rows }, () =>\n    Array.from({ length: columns }, () => ({ ...defaultCell }))\n  );\n\n  return {\n    rows: builtRows,\n    size: { rows, columns },\n  };\n};\n\nconst findDropPosition = ({ board, position, shape }) => {\n  let max = board.size.rows - position.row + 1;\n  let row = 0;\n\n  for (let i = 0; i < max; i++) {\n    const delta = { row: i, column: 0 };\n    const result = movePlayer({ delta, position, shape, board });\n    const { collided } = result;\n\n    if (collided) {\n      break;\n    }\n\n    row = position.row + i;\n  }\n\n  return { ...position, row };\n};\n\nexport const nextBoard = ({ board, player, resetPlayer, addLinesCleared }) => {\n  const { tetromino, position } = player;\n\n  let rows = board.rows.map((row) =>\n    row.map((cell) => (cell.occupied ? cell : { ...defaultCell }))\n  );\n\n  const dropPosition = findDropPosition({\n    board,\n    position,\n    shape: tetromino.shape,\n  });\n\n  const className = `${tetromino.className} ${\n    player.isFastDropping ? \"\" : \"ghost\"\n  }`;\n\n  rows = transferToBoard({\n    className,\n    isOccupied: player.isFastDropping,\n    position: dropPosition,\n    rows,\n    shape: tetromino.shape,\n  });\n\n  if (!player.isFastDropping) {\n    rows = transferToBoard({\n      className: tetromino.className,\n      isOccupied: player.collided,\n      position,\n      rows,\n      shape: tetromino.shape,\n    });\n  }\n\n  const blankrow = rows[0].map((_) => ({ ...defaultCell }));\n  let linesCleared \n\n  if (player.collided || player.isFastDropping) {\n    resetPlayer();\n  }\n\n  return {\n    rows,\n    size: { ...board.size },\n  };\n};\n\nexport const hasCollision = ({ board, position, shape }) => {\n  for (let y = 0; y < shape.length; y++) {\n    const row = y + position.row;\n    for (let x = 0; x < shape[y].length; x++) {\n      if (shape[y][x]) {\n        const column = x + position.column;\n\n        if (\n          board.rows[row] &&\n          board.rows[row][column] &&\n          board.rows[row][column].occupied\n        ) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n};\n\nexport const isWithinBoard = ({ board, position, shape }) => {\n  for (let y = 0; y < shape.length; y++) {\n    const row = y + position.row;\n    for (let x = 0; x < shape[y].length; x++) {\n      if (shape[y][x]) {\n        const column = x + position.column;\n        const isValidPosition = board.rows[row] && board.rows[row][column];\n\n        if (!isValidPosition) return false;\n      }\n    }\n  }\n  return true;\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}