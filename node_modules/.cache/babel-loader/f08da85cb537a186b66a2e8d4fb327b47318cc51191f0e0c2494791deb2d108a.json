{"ast":null,"code":"import { Action } from \"./Input\";\nimport { rotate } from \"./Tetrominoes\";\nimport { hasCollision, isWithinBoard } from \"./Board\";\nconst attemptRotation = _ref => {\n  let {\n    board,\n    player,\n    setPlayer\n  } = _ref;\n  const shape = rotate({\n    piece: player.tetromino.shape,\n    direction: 1\n  });\n  const position = player.position;\n  const isValidRotation = isWithinBoard({\n    board,\n    position,\n    shape\n  }) && !hasCollision({\n    board,\n    position,\n    shape\n  });\n  if (isValidRotation) {\n    setPlayer({\n      ...player,\n      tetromino: {\n        ...player.tetromino,\n        shape\n      }\n    });\n  } else {\n    return false;\n  }\n};\nconst attemptMovement = _ref2 => {\n  let {\n    board,\n    player,\n    setPlayer,\n    action,\n    setGameOver\n  } = _ref2;\n};\nexport const playerController = _ref3 => {\n  let {\n    action,\n    board,\n    player,\n    setPlayer,\n    setGameOver\n  } = _ref3;\n  if (!action) return;\n  if (action === Action.Rotate) {\n    attemptRotation({\n      board,\n      player,\n      setPlayer\n    });\n  } else {\n    attemptMovement({\n      board,\n      player,\n      setPlayer,\n      action,\n      setGameOver\n    });\n  }\n};","map":{"version":3,"names":["Action","rotate","hasCollision","isWithinBoard","attemptRotation","board","player","setPlayer","shape","piece","tetromino","direction","position","isValidRotation","attemptMovement","action","setGameOver","playerController","Rotate"],"sources":["/Users/bignovik/Desktop/ITC Assignments/Team-8-game-FE/src/business/PlayerController.js"],"sourcesContent":["import { Action } from \"./Input\";\nimport { rotate } from \"./Tetrominoes\";\nimport { hasCollision, isWithinBoard } from \"./Board\";\n\nconst attemptRotation = ({ board, player, setPlayer }) => {\n  const shape = rotate({\n    piece: player.tetromino.shape,\n    direction: 1,\n  });\n\n  const position = player.position;\n  const isValidRotation =\n    isWithinBoard({ board, position, shape }) &&\n    !hasCollision({ board, position, shape });\n\n  if (isValidRotation) {\n    setPlayer({\n      ...player,\n      tetromino: {\n        ...player.tetromino,\n        shape,\n      },\n    });\n  } else {\n    return false;\n  }\n};\n\nconst attemptMovement = ({\n  board,\n  player,\n  setPlayer,\n  action,\n  setGameOver,\n}) => {\n    \n};\n\nexport const playerController = ({\n  action,\n  board,\n  player,\n  setPlayer,\n  setGameOver,\n}) => {\n  if (!action) return;\n\n  if (action === Action.Rotate) {\n    attemptRotation({ board, player, setPlayer });\n  } else {\n    attemptMovement({ board, player, setPlayer, action, setGameOver });\n  }\n};\n"],"mappings":"AAAA,SAASA,MAAM,QAAQ,SAAS;AAChC,SAASC,MAAM,QAAQ,eAAe;AACtC,SAASC,YAAY,EAAEC,aAAa,QAAQ,SAAS;AAErD,MAAMC,eAAe,GAAG,QAAkC;EAAA,IAAjC;IAAEC,KAAK;IAAEC,MAAM;IAAEC;EAAU,CAAC;EACnD,MAAMC,KAAK,GAAGP,MAAM,CAAC;IACnBQ,KAAK,EAAEH,MAAM,CAACI,SAAS,CAACF,KAAK;IAC7BG,SAAS,EAAE;EACb,CAAC,CAAC;EAEF,MAAMC,QAAQ,GAAGN,MAAM,CAACM,QAAQ;EAChC,MAAMC,eAAe,GACnBV,aAAa,CAAC;IAAEE,KAAK;IAAEO,QAAQ;IAAEJ;EAAM,CAAC,CAAC,IACzC,CAACN,YAAY,CAAC;IAAEG,KAAK;IAAEO,QAAQ;IAAEJ;EAAM,CAAC,CAAC;EAE3C,IAAIK,eAAe,EAAE;IACnBN,SAAS,CAAC;MACR,GAAGD,MAAM;MACTI,SAAS,EAAE;QACT,GAAGJ,MAAM,CAACI,SAAS;QACnBF;MACF;IACF,CAAC,CAAC;EACJ,CAAC,MAAM;IACL,OAAO,KAAK;EACd;AACF,CAAC;AAED,MAAMM,eAAe,GAAG,SAMlB;EAAA,IANmB;IACvBT,KAAK;IACLC,MAAM;IACNC,SAAS;IACTQ,MAAM;IACNC;EACF,CAAC;AAED,CAAC;AAED,OAAO,MAAMC,gBAAgB,GAAG,SAM1B;EAAA,IAN2B;IAC/BF,MAAM;IACNV,KAAK;IACLC,MAAM;IACNC,SAAS;IACTS;EACF,CAAC;EACC,IAAI,CAACD,MAAM,EAAE;EAEb,IAAIA,MAAM,KAAKf,MAAM,CAACkB,MAAM,EAAE;IAC5Bd,eAAe,CAAC;MAAEC,KAAK;MAAEC,MAAM;MAAEC;IAAU,CAAC,CAAC;EAC/C,CAAC,MAAM;IACLO,eAAe,CAAC;MAAET,KAAK;MAAEC,MAAM;MAAEC,SAAS;MAAEQ,MAAM;MAAEC;IAAY,CAAC,CAAC;EACpE;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}